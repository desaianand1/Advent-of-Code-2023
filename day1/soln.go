// This Go solution was generated by translating the Python solution through GPT-3.5 and modifying a solution found online: https://github.com/mosamaasif/advent_of_code/blob/main/2023/day_one/trebuchet.go
// This is purely used as a benchmark against the original Python solution
package main

import (
	"bufio"
	"flag"
	"fmt"
	"os"
	"path"
	"runtime"
	"strconv"
)

func parseArgs() []string {
	input := flag.String("input", "input.txt", "input file (.txt) to be read")
	flag.Parse()
	_, currentFilePath, _, _ := runtime.Caller(0)
	dirPath := path.Dir(currentFilePath)
	inputPath := path.Join(dirPath, *input)
	inputFile, err := os.Open(inputPath)
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	scanner := bufio.NewScanner(inputFile)
	scanner.Split(bufio.ScanLines)
	var fileLines []string

	for scanner.Scan() {
		fileLines = append(fileLines, scanner.Text())
	}
	inputFile.Close()
	return fileLines
}

func isDigit(n rune) bool {
	return n >= '0' && n <= '9'
}
func extractDigits(line string) string {
	var first string
	lastIdx := -1

	for i, el := range line {
		if isDigit(el) {
			if first == "" {
				first = string(el)
			} else {
				lastIdx = i
			}
		}
	}
	if first == "" {
		return ""
	}
	if lastIdx == -1 {
		return first + first
	}
	return first + string(line[lastIdx])
}

func runP1(lines []string) int {
	sum := 0
	for _, line := range lines {
		digits := extractDigits(line)
		if digits != "" {
			digitVal, err := strconv.Atoi(digits)
			if err == nil {
				sum += digitVal
			}
		}
	}
	return sum
}

func runP2(lines []string) int {
	sum := 0
	maxWinLen := 5 // window can't exceed this length if number is in words
	numMap := map[string]int{
		"one":   1,
		"two":   2,
		"three": 3,
		"four":  4,
		"five":  5,
		"six":   6,
		"seven": 7,
		"eight": 8,
		"nine":  9,
	}
	for _, line := range lines {
		firstDigit, lastDigit := -1, -1
		lineLen := len(line)
		for winSt, winEnd := 0, 0; winSt < lineLen; winSt++ {
			winEnd = winSt

			// if starting index contains a number, just use that as is and continue
			if isDigit(rune(line[winSt])) {
				num, _ := strconv.Atoi(string(line[winSt]))
				if firstDigit == -1 {
					firstDigit = num
				}
				lastDigit = num
				continue
			}

			// else use sliding window to find the word if possible
			for winEnd < lineLen && winEnd-winSt < maxWinLen {
				if val, ok := numMap[string(line[winSt:winEnd+1])]; ok {
					if firstDigit == -1 {
						firstDigit = val
					}
					lastDigit = val
					break
				}
				winEnd++
			}
		}
		sum += firstDigit*10 + lastDigit
	}
	return sum
}

func main() {
	lines := parseArgs()
	fmt.Printf("part 1: %d\n", runP1(lines))
	fmt.Printf("part 2: %d\n", runP2(lines))
}
