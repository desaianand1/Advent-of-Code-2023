# This python solution was generated by translating the Go solution through GPT-3.5
# This is purely used as a benchmark against the Go solution
import argparse, os
from typing import List
import sys


def parse_args() -> str:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "input",
        help="input file (.txt) to be read",
        type=str,
        nargs="?",
        default="input.txt",
    )
    args = parser.parse_args()
    path = os.path.join(os.path.dirname(os.path.realpath(__file__)), args.input)
    if os.path.isfile(path):
        return path
    else:
        raise FileNotFoundError(f"Input file {path} not found!")


def parse_int(string: str) -> int:
    try:
        return int(string)
    except ValueError as e:
        print(f"Error parsing number: {e}")
        sys.exit(1)


def parse_sequences(lines: List[str]) -> List[List[int]]:
    sequences = []
    for line in lines:
        tokens = line.split()
        sequence = [parse_int(token) for token in tokens]
        sequences.append(sequence)
    return sequences


def predict_extrapolations(sequences: List[List[int]], is_part_one: bool) -> List[int]:
    extrapolations = []
    for sequence in sequences:
        if is_part_one:
            initial = sequence[-1]
        else:
            initial = sequence[0]
            sequence.reverse()
        extrapolations.append(sum_sequence_differences(sequence, initial))
    return extrapolations


def sum_sequence_differences(sequence: List[int], extrapolation: int) -> int:
    sequence_sum = sum(sequence)
    if sequence_sum == 0:
        return extrapolation
    sequence_diff = [sequence[i + 1] - sequence[i] for i in range(len(sequence) - 1)]
    return sum_sequence_differences(sequence_diff, extrapolation + sequence_diff[-1])


def run_p1(lines: List[str]) -> int:
    sequences = parse_sequences(lines)
    extrapolations = predict_extrapolations(sequences, True)
    return sum(extrapolations)


def run_p2(lines: List[str]) -> int:
    sequences = parse_sequences(lines)
    extrapolations = predict_extrapolations(sequences, False)
    return sum(extrapolations)


if __name__ == "__main__":
    input = parse_args()
    with open(input) as file:
        lines = file.readlines()
        print(f"part 1: {run_p1(lines)}")
        print(f"part 2: {run_p2(lines)}")
