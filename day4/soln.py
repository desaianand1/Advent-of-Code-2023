# This python solution was generated by translating the Go solution through GPT-3.5
# This is purely used as a benchmark against the Go solution
import argparse, os
from typing import List


def parse_args() -> str:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "input",
        help="input file (.txt) to be read",
        type=str,
        nargs="?",
        default="input.txt",
    )
    args = parser.parse_args()
    input_dir = os.path.dirname(os.path.realpath(__file__))
    path = os.path.join(input_dir, args.input)
    if os.path.isfile(path):
        return path
    else:
        raise FileNotFoundError(f"Input file {path} not found!")


def create_winning_hand(winning_hand_raw: List[str]) -> set:
    return set(num.strip() for num in winning_hand_raw if num.strip())


def create_playing_hand(playing_hand_raw: List[str]) -> List[str]:
    return [num.strip() for num in playing_hand_raw if num.strip()]


def calculate_matching_numbers(playing_hand: List[str], winning_hand: set) -> int:
    return sum(1 for num in playing_hand if num in winning_hand)


def parse_card_number(card_num_str: str) -> int:
    return int(card_num_str.strip().split("Card")[1])


def create_card_count_map(size: int) -> dict[int, int]:
    return {i: 1 for i in range(1, size + 1)}


def process_all_cards(
    card_point_map: dict, card_count_map: dict[int, int], current_card: int
) -> None:
    points = card_point_map.get(current_card, 0)
    if not points:
        return
    for i in range(current_card + 1, current_card + points + 1):
        card_count_map[i] += 1
        process_all_cards(card_point_map, card_count_map, i)


def count_all_cards(card_count_map: dict[int, int]) -> int:
    return sum(card_count_map.values())


def run_p1(lines: List[str]) -> int:
    total_sum = 0
    for line in lines:
        _, hands = line.split(":")
        winning_hand = create_winning_hand(hands.split("|")[0].split())
        playing_hand = create_playing_hand(hands.split("|")[1].split())
        points = calculate_matching_numbers(playing_hand, winning_hand)
        if points != 0:
            total_sum += 2 ** (points - 1)
    return total_sum


def run_p2(lines: List[str]) -> int:
    card_point_map = {}
    for line in lines:
        card_num = parse_card_number(line.split(":")[0])
        winning_hand = create_winning_hand(line.split(":")[1].split("|")[0].split())
        playing_hand = create_playing_hand(line.split(":")[1].split("|")[1].split())
        points = calculate_matching_numbers(playing_hand, winning_hand)
        card_point_map.setdefault(card_num, points)
    card_count_map = create_card_count_map(len(card_point_map))
    for i in card_point_map:
        process_all_cards(card_point_map, card_count_map, i)
    return count_all_cards(card_count_map)


if __name__ == "__main__":
    input = parse_args()
    with open(input) as file:
        lines = file.readlines()
        print(f"part 1: {run_p1(lines)}")
        print(f"part 2: {run_p2(lines)}")
